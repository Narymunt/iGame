// SinTable.cpp: implementation of the CSinTable class.
//
//////////////////////////////////////////////////////////////////////

#include <windows.h>
#include <math.h>
#include "SinTable.h"

//=== nasze pi ;)

#ifndef M_PI
#define M_PI	3.14159265358979323846
#endif

//////////////////////////////////////////////////////////////////////
// Construction/Destruction
//////////////////////////////////////////////////////////////////////

//=== alokacja pamieci i przeliczenie

CSinTable::CSinTable()
{

	// tutaj dodac sprawdzenie do loggera

	p_lData = (long*) malloc(1024*sizeof(long));

	// przeliczenie

	for (double dLicznik=0; dLicznik < 1024; dLicznik++)
	{
		*p_lData++ = (long) (sin(dLicznik*M_PI/256)*16384);
	}

}

//=== inna metoda ===
//=== przelicza tez dla calego ekranu - sprawdzic co dokladnie on tam liczy
/*
double i_transtable[256][3], i_invtranstable[256][3];
int i_tunpos[360][2];
unsigned char i_tindex;
int i_rippletable[256];


CSinTable::CSinTable()
{
	double ang;
	int x, y;
	for (int i = 0; i < 256; i++) {
		ang = i * 3.14159265 / 128.0;
                i_transtable[i][0] = 1 + cos(ang) * 0.2;
                i_transtable[i][1] = 1 + sin(ang) * 0.2;
                i_transtable[i][2] = 1 - cos(ang * 2) * 0.4;
                i_invtranstable[i][0] = 1.0 / i_transtable[i][0];
                i_invtranstable[i][1] = 1.0 / i_transtable[i][1];
                i_invtranstable[i][2] = 1.0 / i_transtable[i][2];
	}
	for (i = 0; i < 360; i++) {
		ang = i * Pi / 180.0;
                i_tunpos[i][0] = 160 + cos(ang) * 250;
                i_tunpos[i][1] = 100 + sin(ang) * 250;
	}
	srand(clock());
        for (i = 0; i < 256; i++) {
		x = 320 * rand() / RAND_MAX;
		y = 200 * rand() / RAND_MAX;
		i_rippletable[i] = x + y * 320;
	}
}
*/

//=== outskool ;)

//int sin256[360];
//int sin1024[1024];
/*
= { 0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,
8,8,9,9,9,10,10,11,11,12,12,12,13,13,13,14,14,14,15,
15,15,16,16,16,17,17,17,17,18,18,18,18,18,19,19,19,
19,19,19,20,20,20,20,20,20,20,20,20,20,20,20,20,20,
20,20,20,20,20,19,19,19,19,19,19,18,18,18,18,18,17,
17,17,17,16,16,16,15,15,15,15,14,14,13,13,13,12,12,
12,11,11,10,10,9,9,9,8,8,7,7,6,6,5,5,4,
4,3,3,2,2,2,1,1,0,0,0,0,-1,-1,-2,-2,-3,
-3,-4,-4,-5,-5,-6,-6,-7,-7,-8,-8,-8,-9,-9,-10,-10,-10,
-11,-11,-12,-12,-12,-13,-13,-13,-14,-14,-14,-15,-15,-15,-16,-16,-16,
-16,-17,-17,-17,-17,-17,-18,-18,-18,-18,-18,-18,-19,-19,-19,-19,-19,
-19,-19,-19,-19,-19,-19,-19,-19,-19,-19,-19,-19,-19,-19,-18,-18,-18,
-18,-18,-18,-17,-17,-17,-17,-17,-16,-16,-16,-16,-15,-15,-15,-14,-14,
-14,-14,-13,-13,-12,-12,-12,-11,-11,-11,-10,-10,-9,-9,-8,-8,-8,
-7,-7,-6,-6,-5,-5,-4,-4,-3,-3,-2,-2,-2,-1,-1,0,0
 }; 
*/

//int cos256[360];
//int cos1024[1024];
/*
= { 20,20,20,20,20,20,20,20,20,20,19,19,19,19,19,19,18,
18,18,18,18,17,17,17,17,16,16,16,15,15,15,14,14,14,
13,13,13,12,12,12,11,11,10,10,9,9,9,8,8,7,7,
6,6,5,5,4,4,3,3,2,2,1,1,1,0,0,0,0,
-1,-1,-2,-2,-3,-3,-4,-4,-5,-5,-6,-6,-7,-7,-8,-8,-8,
-9,-9,-10,-10,-10,-11,-11,-12,-12,-12,-13,-13,-13,-14,-14,-14,-15,
-15,-15,-16,-16,-16,-16,-17,-17,-17,-17,-17,-18,-18,-18,-18,-18,-18,
-19,-19,-19,-19,-19,-19,-19,-19,-19,-19,-19,-19,-19,-19,-19,-19,-19,
-19,-19,-18,-18,-18,-18,-18,-18,-17,-17,-17,-17,-17,-16,-16,-16,-16,
-15,-15,-15,-14,-14,-14,-14,-13,-13,-12,-12,-12,-11,-11,-11,-10,-10,
-9,-9,-8,-8,-8,-7,-7,-6,-6,-5,-5,-4,-4,-3,-3,-2,-2,
-1,-1,-1,0,0,0,0,1,1,2,2,3,3,4,4,5,5,
6,6,7,7,8,8,9,9,9,10,10,11,11,11,12,12,13,
13,13,14,14,14,15,15,15,16,16,16,17,17,17,17,18,18,
18,18,18,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20
 };
*/

/*
void make_sin(void)
{
    int i;
    float a,c;

    c=M_PI/128.0;
    for(i=0,a=0.0; i<256;i++,a+=c)
    {
        sin256[i]=(int)((sin(a)*256.0)+0.5);
        cos256[i]=(int)((cos(a)*256.0)+0.5);
    }
    c=M_PI/512.0;
    for(i=0,a=0.0; i<1024;i++,a+=c)
    {
        sin1024[i]=(int)((sin(a)*1024.0)+0.5);
        cos1024[i]=(int)((cos(a)*1024.0)+0.5);
    }
}
*/


//=== zwolnienie pamieci 

CSinTable::~CSinTable()
{

	// zwolnij

	if (p_lData!=NULL)
	{
		free(p_lData);
		p_lData = NULL;
	}

}
